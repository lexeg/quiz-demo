// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QuizDemo.DataAccess.Contexts;

#nullable disable

namespace QuizDemo.DataAccess.Migrations.Migrations
{
    [DbContext(typeof(QuizDbContext))]
    partial class QuizDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QuizDemo.DataAccess.Entities.BranchOfficeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("prefix");

                    b.HasKey("Id")
                        .HasName("branch_office_table_pkey");

                    b.ToTable("branch_office_table", (string)null);
                });

            modelBuilder.Entity("QuizDemo.DataAccess.Entities.EducationalProgramEntity", b =>
                {
                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("ExternalId")
                        .HasName("educational_program_table_pkey");

                    b.ToTable("educational_program_table", (string)null);
                });

            modelBuilder.Entity("QuizDemo.DataAccess.Entities.QuestionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Answers")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("answers");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("question");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid")
                        .HasColumnName("test_id");

                    b.HasKey("Id")
                        .HasName("questions_table_pkey");

                    b.HasIndex("TestId");

                    b.ToTable("questions_table", (string)null);
                });

            modelBuilder.Entity("QuizDemo.DataAccess.Entities.TestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("TestsTable_pkey");

                    b.ToTable("tests_table", (string)null);
                });

            modelBuilder.Entity("QuizDemo.DataAccess.Entities.TestResultEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Answers")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("answers");

                    b.Property<Guid>("BranchOfficeId")
                        .HasColumnType("uuid")
                        .HasColumnName("branch_office_id");

                    b.Property<Guid>("EducationalProgramId")
                        .HasColumnType("uuid")
                        .HasColumnName("educational_program_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_date");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("mobile_phone");

                    b.Property<string>("PresignedUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("presigned_url");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid")
                        .HasColumnName("test_id");

                    b.HasKey("Id")
                        .HasName("test_results_table_pkey");

                    b.HasIndex("BranchOfficeId");

                    b.HasIndex("EducationalProgramId");

                    b.HasIndex("TestId")
                        .IsUnique();

                    b.ToTable("test_results_table", (string)null);
                });

            modelBuilder.Entity("QuizDemo.DataAccess.Entities.QuestionEntity", b =>
                {
                    b.HasOne("QuizDemo.DataAccess.Entities.TestEntity", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .IsRequired()
                        .HasConstraintName("questions_table_test_id_fkey");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("QuizDemo.DataAccess.Entities.TestResultEntity", b =>
                {
                    b.HasOne("QuizDemo.DataAccess.Entities.BranchOfficeEntity", "BranchOffice")
                        .WithMany("TestResults")
                        .HasForeignKey("BranchOfficeId")
                        .IsRequired()
                        .HasConstraintName("test_results_table_branch_office_id_fkey");

                    b.HasOne("QuizDemo.DataAccess.Entities.EducationalProgramEntity", "EducationalProgram")
                        .WithMany("TestResults")
                        .HasForeignKey("EducationalProgramId")
                        .IsRequired()
                        .HasConstraintName("test_results_table_educational_program_id_fkey");

                    b.HasOne("QuizDemo.DataAccess.Entities.TestEntity", "Test")
                        .WithOne("TestResult")
                        .HasForeignKey("QuizDemo.DataAccess.Entities.TestResultEntity", "TestId")
                        .IsRequired()
                        .HasConstraintName("test_results_table_id_fkey");

                    b.Navigation("BranchOffice");

                    b.Navigation("EducationalProgram");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("QuizDemo.DataAccess.Entities.BranchOfficeEntity", b =>
                {
                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("QuizDemo.DataAccess.Entities.EducationalProgramEntity", b =>
                {
                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("QuizDemo.DataAccess.Entities.TestEntity", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("TestResult");
                });
#pragma warning restore 612, 618
        }
    }
}
